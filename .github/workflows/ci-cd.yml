name: CI/CD Pipeline - Sistema de Inventario

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Linting y an√°lisis de c√≥digo
  lint:
    name: üîç Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run Black (Code Formatter Check)
        run: black --check backend/

      - name: Run Flake8 (Linter)
        run: flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics

  # Job 2: Tests unitarios
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_inventario
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done

      - name: Run tests with coverage
        env:
          DATABASE_URL: mysql+pymysql://root:test_password@127.0.0.1:3306/test_inventario
          SECRET_KEY: test-secret-key
          FLASK_ENV: testing
        run: |
          pytest tests/ -v --cov=backend --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Build Docker Image
  build:
    name: üê≥ Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/inventario-petrolera:latest
            ${{ secrets.DOCKER_USERNAME }}/inventario-petrolera:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Deploy to Railway
  deploy:
    name: üöÄ Deploy to Railway
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: railway up --detach

      - name: Notify deployment
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Application URL: https://your-app.up.railway.app"

  # Job 5: Notificaciones
  notify:
    name: üì¢ Notify Status
    runs-on: ubuntu-latest
    needs: [lint, test, build, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Pipeline completed successfully!"
          else
            echo "‚ùå Pipeline failed. Check logs."
            exit 1
          fi
